// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"MODULE_NAME/internal/cache"
	"MODULE_NAME/internal/repo"
	"MODULE_NAME/internal/repo/entity"
	"MODULE_NAME/internal/service"
	"context"
	"github.com/goriller/ginny"
	"github.com/goriller/ginny-gorm"
	"github.com/goriller/ginny-jaeger"
	"github.com/goriller/ginny-redis"
	"github.com/goriller/ginny/config"
	"github.com/goriller/ginny/logger"
	"github.com/goriller/ginny/server"
	"github.com/opentracing/opentracing-go"
)

import (
	_ "go.uber.org/automaxprocs/maxprocs"
)

// Injectors from app.go:

// NewApp
func NewApp(ctx context.Context) (*ginny.Application, error) {
	viper, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	option, err := ginny.NewOption(viper)
	if err != nil {
		return nil, err
	}
	zapLogger := logger.Default()
	redisConfig, err := redis.NewConfig(viper)
	if err != nil {
		return nil, err
	}
	redisRedis, err := redis.NewRedis(ctx, redisConfig, zapLogger)
	if err != nil {
		return nil, err
	}
	redisCache, err := cache.NewRedisCache(redisRedis)
	if err != nil {
		return nil, err
	}
	ormConfig, err := orm.NewConfig(viper, zapLogger)
	if err != nil {
		return nil, err
	}
	ormORM, err := orm.New(ctx, ormConfig, zapLogger)
	if err != nil {
		return nil, err
	}
	userEntity, err := entity.NewUserEntity()
	if err != nil {
		return nil, err
	}
	userRepo, err := repo.NewUserRepo(ormORM, userEntity)
	if err != nil {
		return nil, err
	}
	serviceService, err := service.NewService(redisCache, userRepo)
	if err != nil {
		return nil, err
	}
	registrarFunc := service.RegisterService(ctx, serviceService)
	configuration, err := jaeger.NewConfiguration(viper)
	if err != nil {
		return nil, err
	}
	tracer, err := jaeger.NewJaegerTracer(ctx, configuration)
	if err != nil {
		return nil, err
	}
	v := serverOption(tracer)
	application, err := ginny.NewApp(ctx, option, zapLogger, registrarFunc, v...)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// app.go:

func serverOption(

	tracer opentracing.Tracer,
) (opts []server.Option) {

	opts = append(opts, server.WithTracer(tracer))
	return
}
